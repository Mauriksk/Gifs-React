{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorie","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","animes","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMAGaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAM,OAAMP,GAAN,mBAAqBO,OACzCN,EAAc,MAMlB,SACI,uBACAO,KAAK,OACLC,MAAQT,EACRU,SAlBkB,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCNnBG,EAAM,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACZC,EADY,0FAC8EC,UAAWH,GADzF,sBAEMI,MAAMF,GAFZ,cAEZG,EAFY,gBAIKA,EAAUC,OAJf,uBAIVC,EAJU,EAIVA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVxB,kBAcXM,GAdW,4CAAH,sDCANO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,sBAAKc,UAAU,8CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGtB,ECJwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAW,WACPxB,EAAQC,GACPwB,MAAM,SAAAd,GAGHY,EAAS,CACLf,KAAKG,EACLU,SAAS,SAIlB,CAAEpB,IAGEqB,EDjB2BI,CAAczB,GAAnCa,EAAb,EAAQN,KAAca,EAAtB,EAAsBA,QAatB,OACI,qCAEA,qBAAIJ,UAAU,mCAAd,cAAmDhB,EAAnD,OACA,sBAAKgB,UAAU,YAAf,UACCI,GAAW,mBAAGJ,UAAU,mCAAb,qBAEJH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAGSA,GAFAA,EAAIC,cEzBpBe,EAAe,WAExB,MAAmCxC,mBAAS,CAAC,cAA7C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAMA,OACA,qCACI,8CACA,4DAEA,cAAC,EAAD,CAAaA,aAAcA,IAE3B,uBAIA,6BACI0C,EAAWlB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CACAA,SAAUA,GACLA,YCvBf4B,G,MAAUC,SAASC,cAAc,UAEvCC,IAASC,OAAQ,cAAC,EAAD,IAAmBJ,K","file":"static/js/main.b98206ca.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategorie} ) => {\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue( e.target.value )\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategorie( animes => [ inputValue, ...animes ])\r\n            setinputValue('')\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategorie: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","\r\n\r\nexport const getGif = async ( category ) => { \r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=CN7mIRf9XBMt6WOcpAbfU6wR8sBA4yFZ&q=${ encodeURI( category ) }&limit=10`\r\n    const respuesta = await fetch(url);\r\n    //Es el data de la data entonces mejor desestructurado para no poner data 2 veces\r\n    const { data } = await respuesta.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    } )\r\n    \r\n    return gifs\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__backInRight\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    \r\n    const { data:images , loading } = useFetchGifs( category );\r\n\r\n    //Este hock me permite poner dependencias en el arreglo, si el arreglo esta vacio la funcion dentro solo se ejecutara una ves\r\n    /* useEffect(() => {\r\n        getGif( category )\r\n            .then(setimages)\r\n    }, [ category ]) */\r\n\r\n    //Le coloco el category al array para que no joda el warnin y para que en caso de que cambie la categoria\r\n    //vuelva a permitir ejecutar de nuevo la peticion\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n\r\n        <h3 className=\"animate__animated animate__pulse\"> {category} </h3>\r\n        <div className=\"card-grid\">\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n            {\r\n                images.map( (img) => (\r\n                    <GifGridItem \r\n                        key={img.id}\r\n                        //Otra forma de enviarlas props (todas)\r\n                        { ...img }\r\n                    />\r\n                ))\r\n            }\r\n        </div> \r\n\r\n        </>\r\n    )\r\n}\r\n","import {useEffect, useState} from 'react'\r\nimport { getGif } from '../helpers/getGif'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( ()=>{\r\n        getGif( category )\r\n        .then( img => {\r\n        \r\n        \r\n            setState({\r\n                data:img,\r\n                loading: false\r\n        })\r\n\r\n        } )\r\n    }, [ category ])\r\n\r\n\r\n    return state; //{ data:[], loading: true }\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () =>{\r\n\r\n    const [categories, setCategorie] = useState(['One Punch']);\r\n\r\n    /* const handleAdd = () => {\r\n        setCategorie([...categories, 'HunterXHunter'])\r\n    } */\r\n\r\n    return(\r\n    <>\r\n        <h2>GifExpertApp</h2>\r\n        <p>Look for your favorite gifs</p>\r\n\r\n        <AddCategory setCategorie={setCategorie} />\r\n\r\n        <hr />\r\n\r\n        \r\n\r\n        <ol>{\r\n            categories.map( category => (\r\n                <GifGrid\r\n                category={category} \r\n                key={category}\r\n                />\r\n            ))\r\n        }\r\n        </ol>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport { GifExpertApp } from './GifExpertApp';\r\nimport './index.css'\r\nconst divRoot = document.querySelector('#root');\r\n\r\nReactDOM.render( <GifExpertApp /> , divRoot )"],"sourceRoot":""}